---
# Source: flask-hello/charts/postgresql/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.1.3
    release: "release-name"
    heritage: "Tiller"
type: Opaque
data:
  postgresql-password: "YjVmaTQxZHoxQkU0QzIyRjQ0dQ=="
---
# Source: flask-hello/charts/postgresql/templates/initialization-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-init-scripts
  labels:
    app: postgresql
    chart: postgresql-8.1.3
    release: "release-name"
    heritage: "Tiller"
data:
  create-db.sh: |
    #!/bin/bash
  
    set -x;
  
  
    cat <<EOF | psql -U postgres
    drop database $POSTGRES_DB;
    create database $POSTGRES_DB;
    create user $POSTGRES_USER;
    alter role $POSTGRES_USER with password '$POSTGRES_PASSWORD';
    grant all privileges on database $POSTGRES_DB to $POSTGRES_USER;
    alter database $POSTGRES_DB owner to $POSTGRES_USER;
    EOF
  initial.sql: |
    #!/bin/bash
  
    set -x;
  
  
    postgres=# drop database DATABASE_NAME;
    postgres=# create database DATABASE_NAME;
    postgres=# create user USER_NAME;
    postgres=# alter role USER_NAME with password 'BITNAMI_USER_PASSWORD';
    postgres=# grant all privileges on database DATABASE_NAME to USER_NAME;
    postgres=# alter database DATABASE_NAME owner to USER_NAME;
  

---
# Source: flask-hello/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-8.0.1
    heritage: Tiller
    release: release-name
  name: release-name-redis
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""

---
# Source: flask-hello/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-8.0.1
    heritage: Tiller
    release: release-name
  name: release-name-redis-health
data:
  ping_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" $1 || exit_status=$?
    "$script_dir/ping_master.sh" $1 || exit_status=$?
    exit $exit_status

---
# Source: flask-hello/templates/flask-hello.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-flask-hello-env
  labels:
    app.kubernetes.io/name: flask-hello
    helm.sh/chart: flask-hello-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
data:
  POSTGRES_HOST: release-name-postgresql.default.svc.cluster.local
  POSTGRES_PORT: "5432"
  POSTGRES_DATABASE: "flask_hello"
  POSTGRES_USERNAME: "web"
  POSTGRES_PASSWORD: "b5fi41dz1BE4C22F44u"
  FLASK_HELLO_PORT: "5000"
  FLASK_DEBUG: "true"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-flask-hello
spec:
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: flask-hello
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flask-hello
        helm.sh/chart: flask-hello-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.0"
        app.kubernetes.io/managed-by: Tiller
    spec:
      initContainers:
      - image: "gabrielfalcao/k8s-flask-hello:f04594225036f41a4f41e3c19f808aaa6152a368"
        imagePullPolicy: Always
        name: flask-hello-check-installation
        command: ['/venv/bin/flask-hello', 'check']
        envFrom:
          - configMapRef:
              name: release-name-flask-hello-env

      - image: "gabrielfalcao/k8s-flask-hello:f04594225036f41a4f41e3c19f808aaa6152a368"
        imagePullPolicy: Always
        name: flask-hello-check-db-connection
        command: ['/venv/bin/flask-hello', 'check-db']
        envFrom:
          - configMapRef:
              name: release-name-flask-hello-env

      - image: "gabrielfalcao/k8s-flask-hello:f04594225036f41a4f41e3c19f808aaa6152a368"
        imagePullPolicy: Always
        name: flask-hello-db-migrate
        command: ['/venv/bin/flask-hello', 'migrate-db']
        envFrom:
          - configMapRef:
              name: release-name-flask-hello-env
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-flask-hello-secrets
              key: postgresql-password

      containers:
      - image: "gabrielfalcao/k8s-flask-hello:f04594225036f41a4f41e3c19f808aaa6152a368"
        imagePullPolicy: Always
        name: flask-hello
        command: ['/venv/bin/flask-hello', 'web']
        envFrom:
          - configMapRef:
              name: release-name-flask-hello-env


        ports:
        - containerPort: 5000
          name: api
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-flask-hello
  labels:
    app.kubernetes.io/name: flask-hello
    helm.sh/chart: flask-hello-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller

spec:
  type: NodePort
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: flask-hello
    app.kubernetes.io/instance: release-name


---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: release-name-flask-hello-secrets
  labels:
    app.kubernetes.io/name: flask-hello
    helm.sh/chart: flask-hello-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
data:
  postgresql-password: "YjVmaTQxZHoxQkU0QzIyRjQ0dQ=="

---
# Source: flask-hello/charts/redis/templates/redis-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: release-name-redis
  labels:
    app: redis
    chart: redis-8.0.1
    release: "release-name"
    heritage: "Tiller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-redis
subjects:
- kind: ServiceAccount
  name: default
---
# Source: flask-hello/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.1.3
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "release-name"

---
# Source: flask-hello/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.1.3
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "release-name"
    role: master

---
# Source: flask-hello/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  labels:
    app: redis
    chart: redis-8.0.1
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: "release-name"

---
# Source: flask-hello/charts/redis/templates/metrics-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-metrics
  labels:
    app: redis
    chart: redis-8.0.1
    release: "release-name"
    heritage: "Tiller"
  annotations:
    prometheus.io/port: "9121"
    prometheus.io/scrape: "true"
    
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9121
    targetPort: metrics
  selector:
    app: redis
    release: release-name
    role: metrics

---
# Source: flask-hello/charts/redis/templates/redis-master-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  labels:
    app: redis
    chart: redis-8.0.1
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: "release-name"
    role: master

---
# Source: flask-hello/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-flask-hello-test-connection"
  labels:
    app.kubernetes.io/name: flask-hello
    helm.sh/chart: flask-hello-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['release-name-flask-hello:5000']
  restartPolicy: Never

---
# Source: flask-hello/charts/redis/templates/metrics-deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-redis-metrics
  labels:
    app: redis
    chart: redis-8.0.1
    release: "release-name"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
        release: "release-name"
        role: metrics
        app: redis
  template:
    metadata:
      labels:
        release: "release-name"
        chart: redis-8.0.1
        role: metrics
        app: redis
      annotations:
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        sidecar.istio.io/inject: "false"
        
    spec:      
      serviceAccountName: "default"
      containers:
      - name: metrics
        image: docker.io/oliver006/redis_exporter:v0.31.0
        imagePullPolicy: "IfNotPresent"
        args:
        env:
        - name: REDIS_ADDR
          value: "release-name-redis-master:6379"
        - name: REDIS_ALIAS
          value: release-name-redis
        volumeMounts:
        ports:
        - name: metrics
          containerPort: 9121
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          
      volumes:

---
# Source: flask-hello/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.1.3
    release: "release-name"
    heritage: "Tiller"
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "release-name"
      role: master
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.1.3
        release: "release-name"
        heritage: "Tiller"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/minideb:stretch
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p /data//data
              chmod 700 /data//data
              find /data/ -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /data/
              subPath: 
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: release-name-postgresql
          image: docker.io/postgres:10.6
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/data/"
            - name: PGDATA
              value: "/data/pgdata"
            - name: POSTGRES_USER
              value: "web"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "flask_hello"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "web" -d "flask_hello" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "web" -d "flask_hello" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /data/
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: release-name-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        

---
# Source: flask-hello/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: release-name-redis-master
  labels:
    app: redis
    chart: redis-8.0.1
    release: "release-name"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      release: "release-name"
      role: master
      app: redis
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        release: "release-name"
        chart: redis-8.0.1
        role: master
        app: redis
      annotations:
        checksum/health: 1d2453f99059aaeabd2887ed895d335dfc6d41dc559bc4f2f6457b2e31d49f75
        checksum/configmap: b6b7c53489d6380cee582af1e1b8a1724993b363525699478e658b0b074df832
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
      - name: release-name-redis
        image: "docker.io/bitnami/redis:5.0.5"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi          
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--protected-mode" "no")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
          subPath: 
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc/
      volumes:
      - name: health
        configMap:
          name: release-name-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: release-name-redis
      - name: redis-tmp-conf
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: "redis"
          component: "master"
          release: "release-name"
          heritage: "Tiller"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: "efs"
  updateStrategy:
    type: RollingUpdate

---
# Source: flask-hello/charts/postgresql/templates/configmap.yaml


---
# Source: flask-hello/charts/postgresql/templates/extended-config-configmap.yaml


---
# Source: flask-hello/charts/postgresql/templates/metrics-configmap.yaml


---
# Source: flask-hello/charts/postgresql/templates/metrics-svc.yaml


---
# Source: flask-hello/charts/postgresql/templates/networkpolicy.yaml


---
# Source: flask-hello/charts/postgresql/templates/prometheusrule.yaml


---
# Source: flask-hello/charts/postgresql/templates/serviceaccount.yaml

---
# Source: flask-hello/charts/postgresql/templates/servicemonitor.yaml


---
# Source: flask-hello/charts/postgresql/templates/statefulset-slaves.yaml


---
# Source: flask-hello/charts/postgresql/templates/svc-read.yaml


---
# Source: flask-hello/charts/redis/templates/metrics-prometheus.yaml

---
# Source: flask-hello/charts/redis/templates/networkpolicy.yaml


---
# Source: flask-hello/charts/redis/templates/redis-role.yaml

---
# Source: flask-hello/charts/redis/templates/redis-serviceaccount.yaml

---
# Source: flask-hello/charts/redis/templates/redis-slave-statefulset.yaml


---
# Source: flask-hello/charts/redis/templates/redis-slave-svc.yaml


---
# Source: flask-hello/charts/redis/templates/redis-with-sentinel-svc.yaml


---
# Source: flask-hello/charts/redis/templates/secret.yaml

---
# Source: flask-hello/templates/ingress.yaml


